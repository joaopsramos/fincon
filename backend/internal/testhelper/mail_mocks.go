// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package testhelper

import (
	"github.com/joaopsramos/fincon/internal/mail"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMailer creates a new instance of MockMailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailer {
	mock := &MockMailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMailer is an autogenerated mock type for the Mailer type
type MockMailer struct {
	mock.Mock
}

type MockMailer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailer) EXPECT() *MockMailer_Expecter {
	return &MockMailer_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type MockMailer
func (_mock *MockMailer) Send(email mail.Email) error {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(mail.Email) error); ok {
		r0 = returnFunc(email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMailer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockMailer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - email
func (_e *MockMailer_Expecter) Send(email interface{}) *MockMailer_Send_Call {
	return &MockMailer_Send_Call{Call: _e.mock.On("Send", email)}
}

func (_c *MockMailer_Send_Call) Run(run func(email mail.Email)) *MockMailer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(mail.Email))
	})
	return _c
}

func (_c *MockMailer_Send_Call) Return(err error) *MockMailer_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMailer_Send_Call) RunAndReturn(run func(email mail.Email) error) *MockMailer_Send_Call {
	_c.Call.Return(run)
	return _c
}
